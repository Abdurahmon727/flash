import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'flash_controller.dart';

const double _kMinFlingVelocity = 700.0;
const double _kDismissThreshold = 0.5;

/// A highly customizable widget so you can notify your user when you fell like he needs a beautiful explanation.
class Flash<T> extends StatefulWidget {
  Flash({
    Key? key,
    required this.controller,
    required this.child,
    this.constraints,
    this.margin = EdgeInsets.zero,
    this.borderRadius,
    this.borderColor,
    this.borderWidth,
    this.brightness = Brightness.light,
    this.backgroundColor = Colors.white,
    this.boxShadows,
    this.backgroundGradient,
    this.onTap,
    this.enableVerticalDrag = true,
    this.horizontalDismissDirections,
    this.insetAnimationDuration = const Duration(milliseconds: 100),
    this.insetAnimationCurve = Curves.fastOutSlowIn,
    this.alignment,
    this.position,
    this.behavior,
    this.forwardAnimationCurve = Curves.fastOutSlowIn,
    this.reverseAnimationCurve = Curves.fastOutSlowIn,
    this.useSafeArea = true,
  })  : assert(() {
          if (alignment == null) {
            return behavior != null && position != null;
          } else {
            return behavior == null && position == null;
          }
        }()),
        super(key: key);

  Flash.bar({
    Key? key,
    required this.controller,
    required this.child,
    this.constraints,
    this.margin = EdgeInsets.zero,
    this.borderRadius,
    this.borderColor,
    this.borderWidth,
    this.brightness = Brightness.light,
    this.backgroundColor = Colors.white,
    this.boxShadows,
    this.backgroundGradient,
    this.onTap,
    this.enableVerticalDrag = true,
    this.horizontalDismissDirections,
    this.insetAnimationDuration = const Duration(milliseconds: 100),
    this.insetAnimationCurve = Curves.fastOutSlowIn,
    this.position = FlashPosition.bottom,
    this.behavior = FlashBehavior.floating,
    this.forwardAnimationCurve = Curves.fastOutSlowIn,
    this.reverseAnimationCurve = Curves.fastOutSlowIn,
    this.useSafeArea = true,
  })  : alignment = null,
        assert(behavior != null),
        assert(position != null),
        super(key: key);

  Flash.dialog({
    Key? key,
    required this.controller,
    required this.child,
    this.constraints,
    this.margin = EdgeInsets.zero,
    this.borderRadius,
    this.borderColor,
    this.borderWidth,
    this.brightness = Brightness.light,
    this.backgroundColor = Colors.white,
    this.boxShadows,
    this.backgroundGradient,
    this.onTap,
    this.insetAnimationDuration = const Duration(milliseconds: 100),
    this.insetAnimationCurve = Curves.fastOutSlowIn,
    this.alignment = Alignment.center,
    this.forwardAnimationCurve = Curves.fastOutSlowIn,
    this.reverseAnimationCurve = Curves.fastOutSlowIn,
    this.useSafeArea = true,
  })  : enableVerticalDrag = false,
        horizontalDismissDirections = null,
        behavior = null,
        position = null,
        assert(alignment != null),
        super(key: key);

  final FlashController controller;

  /// The widget below this widget in the tree.
  ///
  /// {@macro flutter.widgets.child}
  final Widget child;

  /// Additional constraints to apply to the child.
  final BoxConstraints? constraints;

  /// The brightness of the [backgroundColor] or [backgroundGradient]
  final Brightness brightness;

  /// Will be ignored if [backgroundGradient] is not null
  final Color? backgroundColor;

  /// [boxShadows] The shadows generated by Flashbar. Leave it null if you don't want a shadow.
  /// You can use more than one if you feel the need.
  /// Check (this example)[https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/material/shadows.dart]
  final List<BoxShadow>? boxShadows;

  /// Makes [backgroundColor] be ignored.
  final Gradient? backgroundGradient;

  /// A callback that registers the user's click anywhere.
  final GestureTapCallback? onTap;

  /// Determines if the user can swipe vertically to dismiss the bar.
  final bool enableVerticalDrag;

  /// Determines if the user can swipe horizontally to dismiss the bar.
  final List<HorizontalDismissDirection>? horizontalDismissDirections;

  /// The duration of the animation to show when the system keyboard intrudes
  /// into the space that the dialog is placed in.
  ///
  /// Defaults to 100 milliseconds.
  final Duration insetAnimationDuration;

  /// The curve to use for the animation shown when the system keyboard intrudes
  /// into the space that the dialog is placed in.
  ///
  /// Defaults to [Curves.fastOutSlowIn].
  final Curve insetAnimationCurve;

  /// Adds a custom margin to Flash.
  final EdgeInsets margin;

  /// Adds a radius to all corners of Flash. Best combined with [margin].
  final BorderRadius? borderRadius;

  /// Adds a border to every side of Flash.
  final Color? borderColor;

  /// Changes the width of the border if [borderColor] is specified.
  final double? borderWidth;

  /// How to align the flash.
  final AlignmentGeometry? alignment;

  /// Flash can be based on [FlashPosition.top] or on [FlashPosition.bottom] of your screen.
  final FlashPosition? position;

  /// Flash can be floating or be grounded to the edge of the screen.
  /// If [behavior] is grounded, I do not recommend using [margin] or [borderRadius].
  final FlashBehavior? behavior;

  /// The [Curve] animation used when show() is called. [Curves.fastOutSlowIn] is default.
  final Curve forwardAnimationCurve;

  /// The [Curve] animation used when dismiss() is called. [Curves.fastOutSlowIn] is default.
  final Curve reverseAnimationCurve;

  /// Is used to indicate if the flashbar should only display in 'safe' areas of
  /// the screen not used by the operating system (see [SafeArea] for more details).
  final bool useSafeArea;

  @override
  State createState() => _FlashState<T>();
}

class _FlashState<T> extends State<Flash<T>> {
  final GlobalKey _childKey = GlobalKey(debugLabel: 'flashbar child');

  /// The node this scope will use for its root [FocusScope] widget.
  final FocusScopeNode focusScopeNode = FocusScopeNode(debugLabel: '$_FlashState Focus Scope');

  double get _childWidth {
    final box = _childKey.currentContext?.findRenderObject() as RenderBox;
    return box.size.width;
  }

  double get _childHeight {
    final box = _childKey.currentContext?.findRenderObject() as RenderBox;
    return box.size.height;
  }

  bool get enableVerticalDrag => widget.enableVerticalDrag;

  List<HorizontalDismissDirection>? get horizontalDismissDirections => widget.horizontalDismissDirections;

  bool get enableHorizontalDrag => horizontalDismissDirections != null && horizontalDismissDirections!.isNotEmpty;

  FlashController get controller => widget.controller;

  AnimationController get animationController => controller.controller;

  late Animation<Offset> _animation;

  late Animation<Offset> _moveAnimation;

  bool _isDragging = false;

  double _dragExtent = 0.0;

  bool _isHorizontalDragging = false;

  @override
  void initState() {
    super.initState();
    animationController.addStatusListener(_handleStatusChanged);
    _moveAnimation = _animation = _createAnimation();
  }

  @override
  void dispose() {
    focusScopeNode.dispose();
    super.dispose();
  }

  bool get _dismissUnderway =>
      animationController.status == AnimationStatus.reverse || animationController.status == AnimationStatus.dismissed;

  @override
  Widget build(BuildContext context) {
    Widget child = widget.child;

    if (widget.borderRadius != null) {
      child = ClipRRect(
        borderRadius: widget.borderRadius,
        child: child,
      );
    }

    if (widget.behavior == FlashBehavior.fixed && widget.useSafeArea) {
      child = SafeArea(
        bottom: widget.position == FlashPosition.bottom,
        top: widget.position == FlashPosition.top,
        child: child,
      );
    }

    child = Ink(
      decoration: BoxDecoration(
        color: widget.backgroundColor,
        gradient: widget.backgroundGradient,
        borderRadius: widget.borderRadius,
        border: widget.borderColor != null
            ? Border.all(color: widget.borderColor!, width: widget.borderWidth ?? 1.0)
            : null,
      ),
      child: child,
    );

    if (widget.onTap != null) {
      child = GestureDetector(
        behavior: HitTestBehavior.opaque,
        onTap: widget.onTap,
        child: child,
      );
    }

    child = Material(
      type: MaterialType.transparency,
      child: child,
    );

    if (widget.constraints != null) {
      child = ConstrainedBox(
        constraints: widget.constraints!,
        child: child,
      );
    }

    // https://github.com/sososdk/flash/issues/23
    if (widget.position == FlashPosition.top) {
      child = AnnotatedRegion<SystemUiOverlayStyle>(
        value: widget.brightness == Brightness.dark ? SystemUiOverlayStyle.light : SystemUiOverlayStyle.dark,
        child: child,
      );
    }

    child = GestureDetector(
      behavior: HitTestBehavior.opaque,
      onHorizontalDragUpdate: enableHorizontalDrag ? _handleHorizontalDragUpdate : null,
      onHorizontalDragEnd: enableHorizontalDrag ? _handleHorizontalDragEnd : null,
      onVerticalDragUpdate: enableVerticalDrag ? _handleVerticalDragUpdate : null,
      onVerticalDragEnd: enableVerticalDrag ? _handleVerticalDragEnd : null,
      child: child,
      excludeFromSemantics: true,
    );

    child = DecoratedBox(
      decoration: BoxDecoration(
        borderRadius: widget.borderRadius,
        boxShadow: widget.boxShadows,
      ),
      child: child,
    );

    if (widget.behavior == FlashBehavior.floating && widget.useSafeArea) {
      child = SafeArea(
        bottom: widget.position == FlashPosition.bottom,
        top: widget.position == FlashPosition.top,
        child: child,
      );
    }

    child = AnimatedPadding(
      padding: MediaQuery.of(context).viewInsets + widget.margin,
      duration: widget.insetAnimationDuration,
      curve: widget.insetAnimationCurve,
      child: child,
    );

    if (widget.alignment == null) {
      child = SlideTransition(
        key: _childKey,
        position: _moveAnimation,
        child: child,
      );
    } else {
      child = SlideTransition(
        key: _childKey,
        position: _moveAnimation,
        child: FadeTransition(
          opacity: animationController.drive(
            Tween<double>(begin: 0.0, end: 1.0),
          ),
          child: child,
        ),
      );
    }

    child = Semantics(
      focused: false,
      scopesRoute: true,
      explicitChildNodes: true,
      child: Stack(
        children: <Widget>[
          if (widget.alignment == null)
            Align(
              alignment: widget.position == FlashPosition.bottom ? Alignment.bottomCenter : Alignment.topCenter,
              child: child,
            )
          else if (widget.useSafeArea)
            SafeArea(child: Align(alignment: widget.alignment!, child: child))
          else
            Align(alignment: widget.alignment!, child: child)
        ],
      ),
    );
    return FocusScope(node: focusScopeNode, child: child);
  }

  /// Called to create the animation that exposes the current progress of
  /// the transition controlled by the animation controller created by
  /// [DefaultFlashController.createAnimationController].
  Animation<Offset> _createAnimation() {
    Animatable<Offset> animatable;
    if (widget.position == FlashPosition.top) {
      animatable = Tween<Offset>(begin: const Offset(0.0, -1.0), end: Offset.zero);
    } else if (widget.position == FlashPosition.bottom) {
      animatable = Tween<Offset>(begin: const Offset(0.0, 1.0), end: Offset.zero);
    } else {
      animatable = Tween<Offset>(begin: const Offset(0.0, 0.05), end: Offset.zero);
    }
    return CurvedAnimation(
      parent: animationController.view,
      curve: widget.forwardAnimationCurve,
      reverseCurve: widget.reverseAnimationCurve,
    ).drive(animatable);
  }

  void _handleHorizontalDragUpdate(DragUpdateDetails details) {
    assert(widget.enableVerticalDrag);
    if (_dismissUnderway) return;
    _isDragging = true;
    _isHorizontalDragging = true;
    final double delta = details.primaryDelta!;
    final double oldDragExtent = _dragExtent;
    if (horizontalDismissDirections!.endToStart) {
      switch (Directionality.of(context)) {
        case TextDirection.rtl:
          if (_dragExtent + delta > 0) _dragExtent += delta;
          break;
        case TextDirection.ltr:
          if (_dragExtent + delta < 0) _dragExtent += delta;
          break;
      }
    } else if (horizontalDismissDirections!.startToEnd) {
      switch (Directionality.of(context)) {
        case TextDirection.rtl:
          if (_dragExtent + delta < 0) _dragExtent += delta;
          break;
        case TextDirection.ltr:
          if (_dragExtent + delta > 0) _dragExtent += delta;
          break;
      }
    } else {
      _dragExtent += delta;
    }
    if (oldDragExtent.sign != _dragExtent.sign) {
      setState(() => _updateMoveAnimation());
    }
    if (_dragExtent > 0) {
      animationController.value -= (_dragExtent - oldDragExtent) / _childWidth;
    } else {
      animationController.value += (_dragExtent - oldDragExtent) / _childWidth;
    }
  }

  void _handleHorizontalDragEnd(DragEndDetails details) {
    assert(enableHorizontalDrag);
    if (_dismissUnderway) return;
    _isDragging = false;
    _dragExtent = 0.0;
    _isHorizontalDragging = false;
    if (animationController.status == AnimationStatus.completed) {
      setState(() => _moveAnimation = _animation);
    }
    if (details.velocity.pixelsPerSecond.dx.abs() > _kMinFlingVelocity) {
      final double flingVelocity = details.velocity.pixelsPerSecond.dx / _childHeight;
      switch (_describeFlingGesture(details.velocity.pixelsPerSecond.dx)) {
        case _FlingGestureKind.none:
          animationController.forward();
          break;
        case _FlingGestureKind.forward:
          animationController.fling(velocity: -flingVelocity);
          controller.deactivate();
          break;
        case _FlingGestureKind.reverse:
          animationController.fling(velocity: flingVelocity);
          controller.deactivate();
          break;
      }
    } else if (animationController.value < _kDismissThreshold) {
      animationController.fling(velocity: -1.0);
      controller.deactivate();
    } else {
      animationController.forward();
    }
  }

  _FlingGestureKind _describeFlingGesture(double dragExtent) {
    _FlingGestureKind kind = _FlingGestureKind.none;
    if (horizontalDismissDirections!.endToStart) {
      switch (Directionality.of(context)) {
        case TextDirection.rtl:
          if (dragExtent > 0) kind = _FlingGestureKind.forward;
          break;
        case TextDirection.ltr:
          if (dragExtent < 0) kind = _FlingGestureKind.reverse;
          break;
      }
    } else if (horizontalDismissDirections!.startToEnd) {
      switch (Directionality.of(context)) {
        case TextDirection.rtl:
          if (dragExtent < 0) kind = _FlingGestureKind.reverse;
          break;
        case TextDirection.ltr:
          if (dragExtent > 0) kind = _FlingGestureKind.forward;
          break;
      }
    } else {
      if (dragExtent > 0) {
        kind = _FlingGestureKind.forward;
      } else {
        kind = _FlingGestureKind.reverse;
      }
    }
    return kind;
  }

  void _handleVerticalDragUpdate(DragUpdateDetails details) {
    assert(widget.enableVerticalDrag);
    if (_dismissUnderway) return;
    _isDragging = true;
    if (widget.position == FlashPosition.top) {
      animationController.value += details.primaryDelta! / _childHeight;
    } else {
      animationController.value -= details.primaryDelta! / _childHeight;
    }
  }

  void _handleVerticalDragEnd(DragEndDetails details) {
    assert(widget.enableVerticalDrag);
    if (_dismissUnderway) return;
    _isDragging = false;
    _dragExtent = 0.0;
    _isHorizontalDragging = false;
    if (animationController.status == AnimationStatus.completed) {
      setState(() => _moveAnimation = _animation);
    }
    if (details.velocity.pixelsPerSecond.dy.abs() > _kMinFlingVelocity) {
      final double flingVelocity = details.velocity.pixelsPerSecond.dy / _childHeight;
      if (widget.position == FlashPosition.top) {
        animationController.fling(velocity: flingVelocity);
        if (flingVelocity < 0) controller.deactivate();
      } else {
        animationController.fling(velocity: -flingVelocity);
        if (flingVelocity > 0) controller.deactivate();
      }
    } else if (animationController.value < _kDismissThreshold) {
      animationController.fling(velocity: -1.0);
      controller.deactivate();
    } else {
      animationController.forward();
    }
  }

  void _handleStatusChanged(AnimationStatus status) {
    switch (status) {
      case AnimationStatus.completed:
        if (!_isDragging) {
          setState(() => _moveAnimation = _animation);
        }
        break;
      case AnimationStatus.forward:
      case AnimationStatus.reverse:
        if (_isDragging) {
          setState(() => _updateMoveAnimation());
        }
        break;
      case AnimationStatus.dismissed:
        break;
    }
  }

  void _updateMoveAnimation() {
    Animatable<Offset> animatable;
    if (_isHorizontalDragging == true) {
      final double end = _dragExtent.sign;
      animatable = Tween<Offset>(begin: Offset(end, 0.0), end: Offset.zero);
    } else {
      if (widget.position == FlashPosition.top) {
        animatable = Tween<Offset>(begin: const Offset(0.0, -1.0), end: Offset.zero);
      } else {
        animatable = Tween<Offset>(begin: const Offset(0.0, 1.0), end: Offset.zero);
      }
    }
    _moveAnimation = animationController.drive(animatable);
  }
}

/// Indicates if flash is going to start at the [top] or at the [bottom].
enum FlashPosition { top, bottom }

/// Indicates if flash will be attached to the edge of the screen or not.
enum FlashBehavior { floating, fixed }

/// The direction in which a [HorizontalDismissDirection] can be dismissed.
enum HorizontalDismissDirection {
  /// The [HorizontalDismissDirection] can be dismissed by dragging in the reverse of the
  /// reading direction (e.g., from right to left in left-to-right languages).
  endToStart,

  /// The [HorizontalDismissDirection] can be dismissed by dragging in the reading direction
  /// (e.g., from left to right in left-to-right languages).
  startToEnd,
}

extension _HorizontalDismissDirections on List<HorizontalDismissDirection> {
  bool get endToStart => length == 1 && first == HorizontalDismissDirection.endToStart;

  bool get startToEnd => length == 1 && first == HorizontalDismissDirection.startToEnd;
}

enum _FlingGestureKind { none, forward, reverse }

class FlashBar extends StatefulWidget {
  FlashBar({
    Key? key,
    this.padding = const EdgeInsets.all(16.0),
    this.title,
    required this.content,
    this.icon,
    this.shouldIconPulse = true,
    this.indicatorColor,
    this.primaryAction,
    this.actions,
    this.showProgressIndicator = false,
    this.progressIndicatorController,
    this.progressIndicatorBackgroundColor,
    this.progressIndicatorValueColor,
  }) : super(key: key);

  /// The (optional) title of the flashbar is displayed in a large font at the top
  /// of the flashbar.
  ///
  /// Typically a [Text] widget.
  final Widget? title;

  /// The message of the flashbar is displayed in the center of the flashbar in
  /// a lighter font.
  ///
  /// Typically a [Text] widget.
  final Widget content;

  /// If not null, shows a left vertical bar to better indicate the humor of the notification.
  /// It is not possible to use it with a [Form] and I do not recommend using it with [LinearProgressIndicator]
  final Color? indicatorColor;

  /// You can use any widget here, but I recommend [Icon] or [Image] as indication of what kind
  /// of message you are displaying. Other widgets may break the layout
  final Widget? icon;

  /// An option to animate the icon (if present). Defaults to true.
  final bool shouldIconPulse;

  /// A widget if you need an action from the user.
  final Widget? primaryAction;

  /// The (optional) set of actions that are displayed at the bottom of the flashbar.
  ///
  /// Typically this is a list of [TextButton] widgets.
  ///
  /// These widgets will be wrapped in a [ButtonBar], which introduces 8 pixels
  /// of padding on each side.
  final List<Widget>? actions;

  /// True if you want to show a [LinearProgressIndicator].
  final bool showProgressIndicator;

  /// An optional [AnimationController] when you want to control the progress of your [LinearProgressIndicator].
  final AnimationController? progressIndicatorController;

  /// A [LinearProgressIndicator] configuration parameter.
  final Color? progressIndicatorBackgroundColor;

  /// A [LinearProgressIndicator] configuration parameter.
  final Animation<Color>? progressIndicatorValueColor;

  /// Adds a custom padding to Flashbar
  ///
  /// The default follows material design guide line
  final EdgeInsets padding;

  @override
  State<FlashBar> createState() => _FlashBarState();
}

class _FlashBarState extends State<FlashBar> with SingleTickerProviderStateMixin {
  AnimationController? _fadeController;
  Animation<double>? _fadeAnimation;

  final double _initialOpacity = 1.0;
  final double _finalOpacity = 0.4;

  final Duration _pulseAnimationDuration = Duration(seconds: 1);

  late bool _isTitlePresent;
  late bool _isActionsPresent;
  late double _messageTopMargin;
  late double _messageBottomMargin;

  @override
  void initState() {
    super.initState();

    _isTitlePresent = widget.title != null;
    _messageTopMargin = _isTitlePresent ? 6.0 : widget.padding.top;
    _isActionsPresent = widget.actions?.isNotEmpty == true;
    _messageBottomMargin = _isActionsPresent ? 6.0 : widget.padding.bottom;

    if (widget.icon != null && widget.shouldIconPulse) {
      _configurePulseAnimation();
      _fadeController!.forward();
    }
  }

  void _configurePulseAnimation() {
    _fadeController = AnimationController(vsync: this, duration: _pulseAnimationDuration);
    _fadeAnimation = Tween(begin: _initialOpacity, end: _finalOpacity).animate(
      CurvedAnimation(
        parent: _fadeController!,
        curve: Curves.linear,
      ),
    );

    _fadeController!.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        _fadeController!.reverse();
      }
      if (status == AnimationStatus.dismissed) {
        _fadeController!.forward();
      }
    });

    _fadeController!.forward();
  }

  @override
  void dispose() {
    _fadeController?.dispose();

    widget.progressIndicatorController?.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        if (widget.showProgressIndicator)
          if (widget.progressIndicatorController == null)
            LinearProgressIndicator(
              backgroundColor: widget.progressIndicatorBackgroundColor,
              valueColor: widget.progressIndicatorValueColor,
            )
          else
            AnimatedBuilder(
              animation: widget.progressIndicatorController!,
              builder: (context, child) {
                return LinearProgressIndicator(
                  value: widget.progressIndicatorController!.value,
                  backgroundColor: widget.progressIndicatorBackgroundColor,
                  valueColor: widget.progressIndicatorValueColor,
                );
              },
            ),
        IntrinsicHeight(
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: _getAppropriateRowLayout(),
          ),
        ),
      ],
    );
  }

  List<Widget> _getAppropriateRowLayout() {
    double buttonRightPadding;
    double iconPadding = 0;
    if (widget.padding.right - 12 < 0) {
      buttonRightPadding = 4;
    } else {
      buttonRightPadding = widget.padding.right - 12;
    }

    if (widget.padding.left > 16.0) {
      iconPadding = widget.padding.left;
    }

    if (widget.icon == null && widget.primaryAction == null) {
      return [
        if (widget.indicatorColor != null)
          Container(
            color: widget.indicatorColor,
            width: 5.0,
          ),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              if (_isTitlePresent)
                Padding(
                  padding: EdgeInsets.only(
                    top: widget.padding.top,
                    left: widget.padding.left,
                    right: widget.padding.right,
                  ),
                  child: _getTitle(),
                ),
              Padding(
                padding: EdgeInsets.only(
                  top: _messageTopMargin,
                  left: widget.padding.left,
                  right: widget.padding.right,
                  bottom: _messageBottomMargin,
                ),
                child: _getMessage(),
              ),
              if (_isActionsPresent)
                ButtonTheme(
                  padding: EdgeInsets.symmetric(horizontal: buttonRightPadding),
                  child: ButtonBar(
                    children: widget.actions!,
                  ),
                ),
            ],
          ),
        ),
      ];
    } else if (widget.icon != null && widget.primaryAction == null) {
      return <Widget>[
        if (widget.indicatorColor != null)
          Container(
            color: widget.indicatorColor,
            width: 5.0,
          ),
        Expanded(
          child: Column(
            children: <Widget>[
              Row(
                children: <Widget>[
                  ConstrainedBox(
                    constraints: BoxConstraints(minWidth: 42.0 + iconPadding),
                    child: _getIcon(),
                  ),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: <Widget>[
                        if (_isTitlePresent)
                          Padding(
                            padding: EdgeInsets.only(
                              top: widget.padding.top,
                              left: 4.0,
                              right: widget.padding.left,
                            ),
                            child: _getTitle(),
                          ),
                        Padding(
                          padding: EdgeInsets.only(
                            top: _messageTopMargin,
                            left: 4.0,
                            right: widget.padding.right,
                            bottom: _messageBottomMargin,
                          ),
                          child: _getMessage(),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              if (_isActionsPresent)
                ButtonTheme(
                  padding: EdgeInsets.symmetric(horizontal: buttonRightPadding),
                  child: ButtonBar(
                    children: widget.actions!,
                  ),
                ),
            ],
          ),
        ),
      ];
    } else if (widget.icon == null && widget.primaryAction != null) {
      return <Widget>[
        if (widget.indicatorColor != null)
          Container(
            color: widget.indicatorColor,
            width: 5.0,
          ),
        Expanded(
          child: Column(
            children: <Widget>[
              Row(
                children: <Widget>[
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: <Widget>[
                        if (_isTitlePresent)
                          Padding(
                            padding: EdgeInsets.only(
                              top: widget.padding.top,
                              left: widget.padding.left,
                              right: widget.padding.right,
                            ),
                            child: _getTitle(),
                          ),
                        Padding(
                          padding: EdgeInsets.only(
                            top: _messageTopMargin,
                            left: widget.padding.left,
                            right: 4.0,
                            bottom: _messageBottomMargin,
                          ),
                          child: _getMessage(),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(right: buttonRightPadding),
                    child: _getPrimaryAction(),
                  ),
                ],
              ),
              if (_isActionsPresent)
                ButtonTheme(
                  padding: EdgeInsets.symmetric(horizontal: buttonRightPadding),
                  child: ButtonBar(
                    children: widget.actions!,
                  ),
                ),
            ],
          ),
        ),
      ];
    } else {
      return <Widget>[
        if (widget.indicatorColor != null)
          Container(
            color: widget.indicatorColor,
            width: 5.0,
          ),
        Expanded(
          child: Column(
            children: <Widget>[
              Expanded(
                child: Row(
                  children: <Widget>[
                    ConstrainedBox(
                      constraints: BoxConstraints(minWidth: 42.0 + iconPadding),
                      child: _getIcon(),
                    ),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: <Widget>[
                          if (_isTitlePresent)
                            Padding(
                              padding: EdgeInsets.only(
                                top: widget.padding.top,
                                left: 4.0,
                                right: 4.0,
                              ),
                              child: _getTitle(),
                            ),
                          Padding(
                            padding: EdgeInsets.only(
                              top: _messageTopMargin,
                              left: 4.0,
                              right: 4.0,
                              bottom: _messageBottomMargin,
                            ),
                            child: _getMessage(),
                          ),
                        ],
                      ),
                    ),
                    Padding(
                      padding: EdgeInsets.only(right: buttonRightPadding),
                      child: _getPrimaryAction(),
                    ),
                  ],
                ),
              ),
              if (_isActionsPresent)
                ButtonTheme(
                  padding: EdgeInsets.symmetric(horizontal: buttonRightPadding),
                  child: ButtonBar(
                    children: widget.actions!,
                  ),
                ),
            ],
          ),
        ),
      ];
    }
  }

  Widget _getIcon() {
    assert(widget.icon != null);
    Widget child;
    if (widget.shouldIconPulse) {
      child = FadeTransition(
        opacity: _fadeAnimation!,
        child: widget.icon,
      );
    } else {
      child = widget.icon!;
    }
    return child;
  }

  Widget _getTitle() {
    return Semantics(
      child: widget.title,
      namesRoute: true,
      container: true,
    );
  }

  Widget _getMessage() {
    return widget.content;
  }

  Widget _getPrimaryAction() {
    assert(widget.primaryAction != null);
    final buttonTheme = ButtonTheme.of(context);
    return ButtonTheme(
      textTheme: ButtonTextTheme.primary,
      child: IconTheme(
        data: Theme.of(context).iconTheme.copyWith(color: buttonTheme.colorScheme?.primary),
        child: widget.primaryAction!,
      ),
    );
  }
}

/// Applies a theme to descendant flash widgets.
class FlashTheme extends InheritedWidget {
  /// Specifies the styles for descendant flash bar widgets.
  final FlashBarThemeData? flashBarTheme;

  /// Specifies the style for descendant flash dialog widgets.
  final FlashDialogThemeData? flashDialogTheme;

  /// Specifies the style for descendant flash block dialog widgets.
  final FlashBlockDialogThemeData? flashBlockDialogTheme;

  /// Applies the given theme to [child].
  FlashTheme({
    Key? key,
    required Widget child,
    this.flashBarTheme,
    this.flashDialogTheme,
    this.flashBlockDialogTheme,
  }) : super(key: key, child: child);

  /// The data from the closest [FlashBarThemeData] instance given the build
  /// context.
  static FlashBarThemeData bar(BuildContext context) {
    final flashTheme = context.dependOnInheritedWidgetOfExactType<FlashTheme>();
    final theme = Theme.of(context);
    final isThemeDark = theme.brightness == Brightness.dark;
    return flashTheme?.flashBarTheme ??
        (isThemeDark ? const FlashBarThemeData.dark() : const FlashBarThemeData.light());
  }

  /// The data from the closest [FlashDialogThemeData] instance given the build
  /// context.
  static FlashDialogThemeData dialog(BuildContext context) {
    final flashTheme = context.dependOnInheritedWidgetOfExactType<FlashTheme>();
    return flashTheme?.flashDialogTheme ?? const FlashDialogThemeData();
  }

  /// The data from the closest [FlashBlockDialogThemeData] instance given the
  /// build context.
  static FlashBlockDialogThemeData blockDialog(BuildContext context) {
    final flashTheme = context.dependOnInheritedWidgetOfExactType<FlashTheme>();
    return flashTheme?.flashBlockDialogTheme ?? const FlashBlockDialogThemeData();
  }

  @override
  bool updateShouldNotify(covariant FlashTheme oldWidget) {
    return flashBarTheme != oldWidget.flashBarTheme ||
        flashDialogTheme != oldWidget.flashDialogTheme ||
        flashBlockDialogTheme != oldWidget.flashBlockDialogTheme;
  }
}

/// Defines the configuration of the overall visual [FlashTheme] bar.
@immutable
class FlashBarThemeData {
  /// Default value for [DefaultFlashController.transitionDuration].
  final Duration? transitionDuration;

  /// Default value for [DefaultFlashController.reverseTransitionDuration].
  final Duration? reverseTransitionDuration;

  /// Default value for [Flash.behavior].
  ///
  /// If null, [Flash] will default to [FlashBehavior.fixed].
  final FlashBehavior? behavior;

  /// Default value for [Flash.position].
  ///
  /// If null, [Flash] will default to [FlashPosition.bottom].
  final FlashPosition? position;

  /// Default value for [Flash.enableVerticalDrag].
  ///
  /// If null, [Flash] will default to true.
  final bool? enableVerticalDrag;

  /// Default value for [Flash.horizontalDismissDirections].
  final List<HorizontalDismissDirection>? horizontalDismissDirections;

  /// Default value for [Flash.brightness].
  ///
  /// If null, [Flash] will default to inversion of [ThemeData.brightness].
  final Brightness? brightness;

  /// Default value for [Flash.backgroundColor].
  ///
  /// If null, [Flash] will default to inversion of [ThemeData.colorScheme.background].
  final Color? backgroundColor;

  /// Default value for [Flash.backgroundGradient].
  final Gradient? backgroundGradient;

  /// Default value for [Flash.boxShadows].
  final List<BoxShadow>? boxShadows;

  /// Default value for [DefaultFlashController.barrierColor].
  final Color? barrierColor;

  /// Default value for [DefaultFlashController.barrierFilter].
  final ImageFilter? barrierFilter;

  /// Default value for [DefaultFlashController.barrierDismissible].
  ///
  /// If null, [Flash] will default to true.
  final bool? barrierDismissible;

  /// Default value for [Flash.borderRadius].
  final BorderRadius? borderRadius;

  /// Default value for [Flash.borderColor].
  final Color? borderColor;

  /// Default value for [Flash.borderWidth].
  final double? borderWidth;

  /// Default value for [Flash.constraints].
  final BoxConstraints? constraints;

  /// Default value for [Flash.margin].
  ///
  /// If null, [Flash] will default to [EdgeInsets.zero].
  final EdgeInsets? margin;

  /// Default value for [Flash.insetAnimationDuration].
  ///
  /// If null, [Flash] will default to 100 ms.
  final Duration? insetAnimationDuration;

  /// Default value for [Flash.insetAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? insetAnimationCurve;

  /// Default value for [Flash.forwardAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? forwardAnimationCurve;

  /// Default value for [Flash.reverseAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? reverseAnimationCurve;

  /// Default value for [FlashBar.padding].
  final EdgeInsets? padding;

  /// Default style for [FlashBar.title].
  final TextStyle? titleStyle;

  /// Default style for [FlashBar.content].
  final TextStyle? contentStyle;

  /// Default style for [FlashBar.primaryAction] and [FlashBar.actions].
  final Color? actionColor;

  /// Default value for [FlashBar.indicatorColor] when [FlashBarType.info] used.
  final Color? infoColor;

  /// Default value for [FlashBar.indicatorColor] when [FlashBarType.success]
  /// used.
  final Color? successColor;

  /// Default value for [FlashBar.indicatorColor] when [FlashBarType.error]
  /// used.
  final Color? errorColor;

  /// Creates a flash bar theme that can be used for [Flash] bar.
  const FlashBarThemeData({
    this.transitionDuration = const Duration(milliseconds: 250),
    this.reverseTransitionDuration = const Duration(milliseconds: 200),
    this.behavior,
    this.position,
    this.enableVerticalDrag,
    this.horizontalDismissDirections,
    this.brightness,
    this.backgroundColor,
    this.backgroundGradient,
    this.boxShadows,
    this.barrierColor,
    this.barrierFilter,
    this.barrierDismissible,
    this.borderRadius,
    this.borderColor,
    this.borderWidth,
    this.constraints,
    this.margin,
    this.insetAnimationDuration,
    this.insetAnimationCurve,
    this.forwardAnimationCurve,
    this.reverseAnimationCurve,
    this.padding,
    this.titleStyle,
    this.contentStyle,
    this.actionColor,
    this.infoColor,
    this.successColor,
    this.errorColor,
  });

  /// A default light theme.
  const FlashBarThemeData.light()
      : this(
          brightness: Brightness.light,
          infoColor: const Color(0xFF64B5F6),
          successColor: const Color(0xFF81C784),
          errorColor: const Color(0xFFE57373),
        );

  /// A default dark theme.
  const FlashBarThemeData.dark()
      : this(
          brightness: Brightness.dark,
          infoColor: const Color(0xFF42A5F5),
          successColor: const Color(0xFF66BB6A),
          errorColor: const Color(0xFFEF5350),
        );

  FlashBarThemeData copyWith({
    Duration? transitionDuration,
    Duration? reverseTransitionDuration,
    FlashBehavior? behavior,
    FlashPosition? position,
    bool? enableVerticalDrag,
    List<HorizontalDismissDirection>? horizontalDismissDirections,
    Brightness? brightness,
    Color? backgroundColor,
    Gradient? backgroundGradient,
    List<BoxShadow>? boxShadows,
    Color? barrierColor,
    ImageFilter? barrierFilter,
    bool? barrierDismissible,
    BorderRadius? borderRadius,
    Color? borderColor,
    double? borderWidth,
    BoxConstraints? constraints,
    EdgeInsets? margin,
    Duration? insetAnimationDuration,
    Curve? insetAnimationCurve,
    Curve? forwardAnimationCurve,
    Curve? reverseAnimationCurve,
    EdgeInsets? padding,
    TextStyle? titleStyle,
    TextStyle? contentStyle,
    Color? actionColor,
    Color? infoColor,
    Color? successColor,
    Color? errorColor,
  }) {
    return FlashBarThemeData(
      transitionDuration: transitionDuration ?? this.transitionDuration,
      reverseTransitionDuration: reverseTransitionDuration ?? this.reverseTransitionDuration,
      behavior: behavior ?? this.behavior,
      position: position ?? this.position,
      enableVerticalDrag: enableVerticalDrag ?? this.enableVerticalDrag,
      horizontalDismissDirections: horizontalDismissDirections ?? this.horizontalDismissDirections,
      brightness: brightness ?? this.brightness,
      backgroundColor: backgroundColor ?? this.backgroundColor,
      backgroundGradient: backgroundGradient ?? this.backgroundGradient,
      boxShadows: boxShadows ?? this.boxShadows,
      barrierColor: barrierColor ?? this.barrierColor,
      barrierFilter: barrierFilter ?? this.barrierFilter,
      barrierDismissible: barrierDismissible ?? this.barrierDismissible,
      borderRadius: borderRadius ?? this.borderRadius,
      borderColor: borderColor ?? this.borderColor,
      borderWidth: borderWidth ?? this.borderWidth,
      constraints: constraints ?? this.constraints,
      margin: margin ?? this.margin,
      insetAnimationDuration: insetAnimationDuration ?? this.insetAnimationDuration,
      insetAnimationCurve: insetAnimationCurve ?? this.insetAnimationCurve,
      forwardAnimationCurve: forwardAnimationCurve ?? this.forwardAnimationCurve,
      reverseAnimationCurve: reverseAnimationCurve ?? this.reverseAnimationCurve,
      padding: padding ?? this.padding,
      titleStyle: titleStyle ?? this.titleStyle,
      contentStyle: contentStyle ?? this.contentStyle,
      actionColor: actionColor ?? this.actionColor,
      infoColor: infoColor ?? this.infoColor,
      successColor: successColor ?? this.successColor,
      errorColor: errorColor ?? this.errorColor,
    );
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FlashBarThemeData &&
          runtimeType == other.runtimeType &&
          transitionDuration == other.transitionDuration &&
          reverseTransitionDuration == other.reverseTransitionDuration &&
          behavior == other.behavior &&
          position == other.position &&
          enableVerticalDrag == other.enableVerticalDrag &&
          horizontalDismissDirections == other.horizontalDismissDirections &&
          brightness == other.brightness &&
          backgroundColor == other.backgroundColor &&
          backgroundGradient == other.backgroundGradient &&
          boxShadows == other.boxShadows &&
          barrierColor == other.barrierColor &&
          barrierFilter == other.barrierFilter &&
          barrierDismissible == other.barrierDismissible &&
          borderRadius == other.borderRadius &&
          borderColor == other.borderColor &&
          borderWidth == other.borderWidth &&
          constraints == other.constraints &&
          margin == other.margin &&
          insetAnimationDuration == other.insetAnimationDuration &&
          insetAnimationCurve == other.insetAnimationCurve &&
          forwardAnimationCurve == other.forwardAnimationCurve &&
          reverseAnimationCurve == other.reverseAnimationCurve &&
          padding == other.padding &&
          titleStyle == other.titleStyle &&
          contentStyle == other.contentStyle &&
          actionColor == other.actionColor &&
          infoColor == other.infoColor &&
          successColor == other.successColor &&
          errorColor == other.errorColor;

  @override
  int get hashCode =>
      transitionDuration.hashCode ^
      reverseTransitionDuration.hashCode ^
      behavior.hashCode ^
      position.hashCode ^
      enableVerticalDrag.hashCode ^
      horizontalDismissDirections.hashCode ^
      brightness.hashCode ^
      backgroundColor.hashCode ^
      backgroundGradient.hashCode ^
      boxShadows.hashCode ^
      barrierColor.hashCode ^
      barrierFilter.hashCode ^
      barrierDismissible.hashCode ^
      borderRadius.hashCode ^
      borderColor.hashCode ^
      borderWidth.hashCode ^
      constraints.hashCode ^
      margin.hashCode ^
      insetAnimationDuration.hashCode ^
      insetAnimationCurve.hashCode ^
      forwardAnimationCurve.hashCode ^
      reverseAnimationCurve.hashCode ^
      padding.hashCode ^
      titleStyle.hashCode ^
      contentStyle.hashCode ^
      actionColor.hashCode ^
      infoColor.hashCode ^
      successColor.hashCode ^
      errorColor.hashCode;
}

/// Defines the configuration of the overall visual [FlashTheme] dialog.
@immutable
class FlashDialogThemeData {
  /// Default value for [DefaultFlashController.transitionDuration].
  final Duration? transitionDuration;

  /// Default value for [DefaultFlashController.reverseTransitionDuration].
  final Duration? reverseTransitionDuration;

  /// Default value for [Flash.brightness].
  ///
  /// If null, [Flash] will default to [ThemeData.brightness].
  final Brightness? brightness;

  /// Default value for [Flash.backgroundColor].
  ///
  /// If null, [Flash] will default to [DialogTheme.backgroundColor] or
  /// [ThemeData.dialogBackgroundColor].
  final Color? backgroundColor;

  /// Default value for [Flash.backgroundGradient].
  final Gradient? backgroundGradient;

  /// Default value for [Flash.boxShadows].
  final List<BoxShadow>? boxShadows;

  /// Default value for [DefaultFlashController.barrierColor].
  final Color? barrierColor;

  /// Default value for [DefaultFlashController.barrierFilter].
  final ImageFilter? barrierFilter;

  /// Default value for [DefaultFlashController.barrierDismissible].
  ///
  /// If null, [Flash] will default to true.
  final bool? barrierDismissible;

  /// Default value for [Flash.borderRadius].
  final BorderRadius? borderRadius;

  /// Default value for [Flash.borderColor].
  final Color? borderColor;

  /// Default value for [Flash.borderWidth].
  final double? borderWidth;

  /// Default value for [Flash.constraints].
  final BoxConstraints? constraints;

  /// Default value for [Flash.margin].
  final EdgeInsets? margin;

  /// Default value for [Flash.insetAnimationDuration].
  ///
  /// If null, [Flash] will default to 100 ms.
  final Duration? insetAnimationDuration;

  /// Default value for [Flash.insetAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? insetAnimationCurve;

  /// Default value for [Flash.forwardAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? forwardAnimationCurve;

  /// Default value for [Flash.reverseAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? reverseAnimationCurve;

  /// Default value for [FlashBar.padding].
  final EdgeInsets? padding;

  /// Default style for [FlashBar.title].
  final TextStyle? titleStyle;

  /// Default style for [FlashBar.content].
  final TextStyle? contentStyle;

  /// Default style for [FlashBar.actions].
  final Color? actionColor;

  /// Creates a flash dialog theme that can be used for [Flash] dialog.
  const FlashDialogThemeData({
    this.transitionDuration = const Duration(milliseconds: 250),
    this.reverseTransitionDuration = const Duration(milliseconds: 200),
    this.brightness,
    this.backgroundColor,
    this.backgroundGradient,
    this.boxShadows,
    this.barrierColor = Colors.black54,
    this.barrierFilter,
    this.barrierDismissible,
    this.borderRadius = const BorderRadius.all(Radius.circular(8.0)),
    this.borderColor,
    this.borderWidth,
    this.constraints,
    this.margin,
    this.insetAnimationDuration,
    this.reverseAnimationCurve,
    this.insetAnimationCurve,
    this.forwardAnimationCurve,
    this.padding,
    this.titleStyle,
    this.contentStyle,
    this.actionColor,
  });

  FlashDialogThemeData copyWith({
    Duration? transitionDuration,
    Duration? reverseTransitionDuration,
    Brightness? brightness,
    Color? backgroundColor,
    Gradient? backgroundGradient,
    List<BoxShadow>? boxShadows,
    Color? barrierColor,
    ImageFilter? barrierFilter,
    bool? barrierDismissible,
    BorderRadius? borderRadius,
    Color? borderColor,
    double? borderWidth,
    BoxConstraints? constraints,
    EdgeInsets? margin,
    Duration? insetAnimationDuration,
    Curve? insetAnimationCurve,
    Curve? forwardAnimationCurve,
    Curve? reverseAnimationCurve,
    EdgeInsets? padding,
    TextStyle? titleStyle,
    TextStyle? contentStyle,
    Color? actionColor,
  }) {
    return FlashDialogThemeData(
      transitionDuration: transitionDuration ?? this.transitionDuration,
      reverseTransitionDuration: reverseTransitionDuration ?? this.reverseTransitionDuration,
      brightness: brightness ?? this.brightness,
      backgroundColor: backgroundColor ?? this.backgroundColor,
      backgroundGradient: backgroundGradient ?? this.backgroundGradient,
      boxShadows: boxShadows ?? this.boxShadows,
      barrierColor: barrierColor ?? this.barrierColor,
      barrierFilter: barrierFilter ?? this.barrierFilter,
      barrierDismissible: barrierDismissible ?? this.barrierDismissible,
      borderRadius: borderRadius ?? this.borderRadius,
      borderColor: borderColor ?? this.borderColor,
      borderWidth: borderWidth ?? this.borderWidth,
      constraints: constraints ?? this.constraints,
      margin: margin ?? this.margin,
      insetAnimationDuration: insetAnimationDuration ?? this.insetAnimationDuration,
      insetAnimationCurve: insetAnimationCurve ?? this.insetAnimationCurve,
      forwardAnimationCurve: forwardAnimationCurve ?? this.forwardAnimationCurve,
      reverseAnimationCurve: reverseAnimationCurve ?? this.reverseAnimationCurve,
      padding: padding ?? this.padding,
      titleStyle: titleStyle ?? this.titleStyle,
      contentStyle: contentStyle ?? this.contentStyle,
      actionColor: actionColor ?? this.actionColor,
    );
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FlashDialogThemeData &&
          runtimeType == other.runtimeType &&
          transitionDuration == other.transitionDuration &&
          reverseTransitionDuration == other.reverseTransitionDuration &&
          brightness == other.brightness &&
          backgroundColor == other.backgroundColor &&
          backgroundGradient == other.backgroundGradient &&
          boxShadows == other.boxShadows &&
          barrierColor == other.barrierColor &&
          barrierFilter == other.barrierFilter &&
          barrierDismissible == other.barrierDismissible &&
          borderRadius == other.borderRadius &&
          borderColor == other.borderColor &&
          borderWidth == other.borderWidth &&
          constraints == other.constraints &&
          margin == other.margin &&
          insetAnimationDuration == other.insetAnimationDuration &&
          insetAnimationCurve == other.insetAnimationCurve &&
          forwardAnimationCurve == other.forwardAnimationCurve &&
          reverseAnimationCurve == other.reverseAnimationCurve &&
          padding == other.padding &&
          titleStyle == other.titleStyle &&
          contentStyle == other.contentStyle &&
          actionColor == other.actionColor;

  @override
  int get hashCode =>
      transitionDuration.hashCode ^
      reverseTransitionDuration.hashCode ^
      brightness.hashCode ^
      backgroundColor.hashCode ^
      backgroundGradient.hashCode ^
      boxShadows.hashCode ^
      barrierColor.hashCode ^
      barrierFilter.hashCode ^
      barrierDismissible.hashCode ^
      borderRadius.hashCode ^
      borderColor.hashCode ^
      borderWidth.hashCode ^
      constraints.hashCode ^
      margin.hashCode ^
      insetAnimationDuration.hashCode ^
      insetAnimationCurve.hashCode ^
      forwardAnimationCurve.hashCode ^
      reverseAnimationCurve.hashCode ^
      padding.hashCode ^
      titleStyle.hashCode ^
      contentStyle.hashCode ^
      actionColor.hashCode;
}

/// Defines the configuration of the overall visual [FlashTheme] dialog.
@immutable
class FlashBlockDialogThemeData {
  /// Default value for [FlashController.transitionDuration].
  final Duration? transitionDuration;

  /// Default value for [Flash.brightness].
  ///
  /// If null, [Flash] will default to [ThemeData.brightness].
  final Brightness? brightness;

  /// Default value for [Flash.backgroundColor].
  ///
  /// If null, [Flash] will default to [DialogTheme.backgroundColor] or
  /// [ThemeData.dialogBackgroundColor].
  final Color? backgroundColor;

  /// Default value for [Flash.backgroundGradient].
  final Gradient? backgroundGradient;

  /// Default value for [Flash.boxShadows].
  final List<BoxShadow>? boxShadows;

  /// Default value for [DefaultFlashController.barrierColor].
  final Color? barrierColor;

  /// Default value for [DefaultFlashController.barrierFilter].
  final ImageFilter? barrierFilter;

  /// Default value for [Flash.borderRadius].
  final BorderRadius? borderRadius;

  /// Default value for [Flash.borderColor].
  final Color? borderColor;

  /// Default value for [Flash.borderWidth].
  final double? borderWidth;

  /// Default value for [Flash.margin].
  final EdgeInsets? margin;

  /// Default value for [Flash.insetAnimationDuration].
  ///
  /// If null, [Flash] will default to 100 ms.
  final Duration? insetAnimationDuration;

  /// Default value for [Flash.insetAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? insetAnimationCurve;

  /// Default value for [Flash.forwardAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? forwardAnimationCurve;

  /// Default value for [Flash.reverseAnimationCurve].
  ///
  /// If null, [Flash] will default to [Curves.fastOutSlowIn].
  final Curve? reverseAnimationCurve;

  /// Default value for [FlashBar.padding].
  final EdgeInsets? padding;

  /// Creates a flash dialog theme that can be used for [Flash] block dialog.
  const FlashBlockDialogThemeData({
    this.transitionDuration = const Duration(milliseconds: 250),
    this.brightness,
    this.backgroundColor,
    this.backgroundGradient,
    this.boxShadows,
    this.barrierColor = const Color(0x8A000000),
    this.barrierFilter,
    this.borderRadius = const BorderRadius.all(Radius.circular(8.0)),
    this.borderColor,
    this.borderWidth,
    this.margin,
    this.insetAnimationDuration,
    this.reverseAnimationCurve,
    this.insetAnimationCurve,
    this.forwardAnimationCurve,
    this.padding,
  });

  FlashBlockDialogThemeData copyWith({
    Duration? transitionDuration,
    Brightness? brightness,
    Color? backgroundColor,
    Gradient? backgroundGradient,
    List<BoxShadow>? boxShadows,
    Color? barrierColor,
    ImageFilter? barrierFilter,
    BorderRadius? borderRadius,
    Color? borderColor,
    double? borderWidth,
    EdgeInsets? margin,
    Duration? insetAnimationDuration,
    Curve? insetAnimationCurve,
    Curve? forwardAnimationCurve,
    Curve? reverseAnimationCurve,
    EdgeInsets? padding,
  }) {
    return FlashBlockDialogThemeData(
      transitionDuration: transitionDuration ?? this.transitionDuration,
      brightness: brightness ?? this.brightness,
      backgroundColor: backgroundColor ?? this.backgroundColor,
      backgroundGradient: backgroundGradient ?? this.backgroundGradient,
      boxShadows: boxShadows ?? this.boxShadows,
      barrierColor: barrierColor ?? this.barrierColor,
      barrierFilter: barrierFilter ?? this.barrierFilter,
      borderRadius: borderRadius ?? this.borderRadius,
      borderColor: borderColor ?? this.borderColor,
      borderWidth: borderWidth ?? this.borderWidth,
      margin: margin ?? this.margin,
      insetAnimationDuration: insetAnimationDuration ?? this.insetAnimationDuration,
      insetAnimationCurve: insetAnimationCurve ?? this.insetAnimationCurve,
      forwardAnimationCurve: forwardAnimationCurve ?? this.forwardAnimationCurve,
      reverseAnimationCurve: reverseAnimationCurve ?? this.reverseAnimationCurve,
      padding: padding ?? this.padding,
    );
  }

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FlashBlockDialogThemeData &&
          runtimeType == other.runtimeType &&
          transitionDuration == other.transitionDuration &&
          brightness == other.brightness &&
          backgroundColor == other.backgroundColor &&
          backgroundGradient == other.backgroundGradient &&
          boxShadows == other.boxShadows &&
          barrierColor == other.barrierColor &&
          barrierFilter == other.barrierFilter &&
          borderRadius == other.borderRadius &&
          borderColor == other.borderColor &&
          borderWidth == other.borderWidth &&
          margin == other.margin &&
          insetAnimationDuration == other.insetAnimationDuration &&
          insetAnimationCurve == other.insetAnimationCurve &&
          forwardAnimationCurve == other.forwardAnimationCurve &&
          reverseAnimationCurve == other.reverseAnimationCurve &&
          padding == other.padding;

  @override
  int get hashCode =>
      transitionDuration.hashCode ^
      brightness.hashCode ^
      backgroundColor.hashCode ^
      backgroundGradient.hashCode ^
      boxShadows.hashCode ^
      barrierColor.hashCode ^
      barrierFilter.hashCode ^
      borderRadius.hashCode ^
      borderColor.hashCode ^
      borderWidth.hashCode ^
      margin.hashCode ^
      insetAnimationDuration.hashCode ^
      insetAnimationCurve.hashCode ^
      forwardAnimationCurve.hashCode ^
      reverseAnimationCurve.hashCode ^
      padding.hashCode;
}
